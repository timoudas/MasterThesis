tvar.sfsi <- TVAR(model_data.SFI, lag=1, thDelay = 0, nthresh=1, trim = 0.15, mTh = 1, plot=TRUE, trace = TRUE)
md <- model_data.SFI[,1:-1]
md <- model_data.SFI[1]
md
md <- model_data.SFI[,1]
md
md <- model_data.SFI[1,]
md
md <- model_data.SFI[1,1]
md
md <- model_data.SFI[,1]
md
md <- model_data.SFI[,1:2]
md
md <- model_data.SFI[,2:]
md
md <- model_data.SFI[,2:4]
md
md <- model_data.SFI[,2:4]
th <- model_data.SFI[, 1]
tvar <- TVAR(md, lag=1, nthresh=1, thDelay=0, thVar = th, trim = 0.15, mTh = 1, plot=TRUE, trace = TRUE)
md <- model_data.SFI[,2:4]
th <- model_data.SFI[, 1]
tvar <- TVAR(md, lag=1, nthresh=1, thDelay=0, thVar = th, trim = 0.15, mTh = 1, plot=TRUE, trace = TRUE)
tvar <- TVAR(md, lag=1, nthresh=1, thDelay=1, thVar = th, trim = 0.15, mTh = 1, plot=TRUE, trace = TRUE)
md <- model_data.SFI[,2:4]
th <- model_data.SFI[, 1]
tvar <- TVAR(md, lag=1, nthresh=1, thDelay=1, thVar = th, trim = 0.15, plot=TRUE, trace = TRUE)
tvar <- TVAR(md, lag=1, nthresh=1, thDelay=1, gamma = 0.3, thVar = th, trim = 0.15, plot=TRUE, trace = TRUE)
tvar <- TVAR(md, lag=1, nthresh=1, thDelay=1, gamma = 0.3, thVar = th, trim = 0.15, plot=TRUE, trace = TRUE)
rvar
tvar
tvar <- TVAR(md, lag=1, nthresh=1, thDelay=1, gamma = 0.3, thVar = th, trim = 0.15, plot=TRUE, trace = TRUE)
e <- resid(tvar)
cov_matrix <- t(e) %*% e
R <- chol(cov_matrix)  ## upper tri
L <-t(R)  ## lower tri
L
md <- model_data.SFI[,1:4]
th <- model_data.SFI[, 1]
tvar <- TVAR(md, lag=1, nthresh=1, thDelay=1, gamma = 0.3, thVar = th, trim = 0.15, plot=TRUE, trace = TRUE)
tvar <- TVAR(md, lag=1, nthresh=1, thDelay=1, thVar = th, trim = 0.15, plot=TRUE, trace = TRUE)
md <- model_data.SFI[,1:4]
th <- model_data.SFI[, 1]
tvar <- TVAR(md, lag=1, nthresh=1, thDelay=1, thVar = th, trim = 0.15, plot=TRUE, trace = TRUE)
tvar <- TVAR(model_data.CLIFS, lag=1, nthresh=1, thDelay=1, trim = 0.15, mTh = 1, plot=TRUE, trace = TRUE)
tvar <- TVAR(md, lag=1, nthresh=1, thDelay=1, thVar = th, trim = 0.15, plot=TRUE, trace = TRUE)
tvar <- TVAR(model_data.SFI, lag=1, nthresh=1, thDelay=1, trim = 0.15, mTh = 1, plot=TRUE, trace = TRUE)
tvar <- TVAR(md, lag=1, nthresh=1, thDelay=1, thVar = th, trim = 0.15, plot=TRUE, trace = TRUE)
tvar <- TVAR(model_data.SFI, lag=1, nthresh=1, thDelay=1, trim = 0.15, mTh = 1, plot=TRUE, trace = TRUE)
md <- model_data.SFI[,2:4]
th <- model_data.SFI[, 1]
tvar <- TVAR(md, lag=1, nthresh=1, thDelay=1, thVar = th, trim = 0.15, plot=TRUE, trace = TRUE)
tvar <- TVAR(model_data.SFI, lag=1, nthresh=1, thDelay=1, trim = 0.15, mTh = 1, plot=TRUE, trace = TRUE)
tvar <- TVAR(md, lag=1, nthresh=1, thDelay=1, thVar = th, trim = 0.15, plot=TRUE, trace = TRUE)
plot(SFSI_INDEX)
plot(diff(SFSI_INDEX))
plot(diff(log(SFSI_INDEX))*100)
plot(diff(log(BNP))*100)
plot(diff(log(BNP)))
plot(diff(log(BNP)))
log(bnp)
log(BNP)
diff(log(BNP))
diff(BNP)
plot(diff(BNP))
plot(diff(log(BNP)))
plot(diff(log(BNP))*100)
data("e1") # Load the data
library(bvartools)
data("e1") # Load the data
e1 <- diff(log(e1)) # Calculate first-log-difference
plot(e1)
e1 <- e1 * 100 # Rescale data
plot(e1) # Plot the series
data("e1") # Load the data
plot(e1)
plot(SFSI)
plot(SFSI_INDEX)
plot(diff(SFSI_INDEX))
summary(diff(SFSI_INDEX))
plot(BNP) # Plot the series
plot(CPI) # Plot the series
plot(INT) # Plot the series
plot(INT1) # Plot the series
plot(INT) # Plot the series
plot(diff(BNP))
DATA_DSFSI <- ts.intersect(SFSI_INDEX, diff(BNP), CPI, INT)
colnames(DATA_DSFSI) <-c("SFSI", "DBNP", 'CPI', "INT")
write.csv(DATA_DSFSI, file="data2.csv")
DATA_DSFSI <- ts.intersect(diff(SFSI_INDEX), diff(BNP), CPI, INT)
colnames(DATA_DSFSI) <-c("DSFSI", "DBNP", 'CPI', "INT")
write.csv(DATA_DSFSI, file="data2.csv")
source('stationarity_tests.R')
library(vars)
VARselect(model_data.SFI, lag.max = 10, type='const')$selection
VAR(model_data.SFI, type='const', lag=1)
FEIR <- irf(model, impulse = "SFSI", response = "BNP", n.ahead = 20, ci = 0.90, type = "oir")
model <- VAR(model_data.SFI, type='const', lag=1)
FEIR <- irf(model, impulse = "SFSI", response = "BNP", n.ahead = 20, ci = 0.90, type = "oir")
par(mfrow=c(1,1))
plot(FEIR,
main = "",
col = 2,
)
FEIR <- irf(model, impulse = "SFSI", response = "CPI", n.ahead = 20, ci = 0.90, type = "oir")
par(mfrow=c(1,1))
plot(FEIR,
main = "",
col = 2,
)
FEIR <- irf(model, impulse = "SFSI", response = "DINT", n.ahead = 20, ci = 0.90, type = "oir")
par(mfrow=c(1,1))
plot(FEIR,
main = "",
col = 2,
)
FEIR <- irf(model, impulse = "SFSI", response = "SFSI", n.ahead = 20, ci = 0.90, type = "oir")
par(mfrow=c(1,1))
plot(FEIR,
main = "",
col = 2,
)
FEIR <- irf(model, impulse = "SFSI", response = "BNP", n.ahead = 20, ci = 0.90, type = "oir")
par(mfrow=c(1,1))
plot(FEIR,
main = "",
col = 2,
)
FEIR <- irf(model, impulse = "BNP", response = "SFSI", n.ahead = 20, ci = 0.90, type = "oir")
par(mfrow=c(1,1))
plot(FEIR,
main = "",
col = 2,
)
FEIR <- irf(model, impulse = "BNP", response = "DINT", n.ahead = 20, ci = 0.90, type = "oir")
par(mfrow=c(1,1))
plot(FEIR,
main = "",
col = 2,
)
FEIR <- irf(model, impulse = "SFSI", response = "BNP", n.ahead = 20, ci = 0.90, type = "oir")
par(mfrow=c(1,1))
plot(FEIR,
main = "",
col = 2,
)
FEIR <- irf(model, impulse = "SFSI", response = "BNP", n.ahead = 20, ci = 0.90, type = "oir", runs=500)
par(mfrow=c(1,1))
plot(FEIR,
main = "",
col = 2,
)
FEIR <- irf(model, impulse = "SFSI", response = "BNP", n.ahead = 20, ci = 0.90, type = "oir", runs=1000)
par(mfrow=c(1,1))
plot(FEIR,
main = "",
col = 2,
)
tsayTest(model_data.SFI[, 'SFSI'], 1) #FOLLOWS AN AR(1)
tsayTest(model_data.SFI[, 'SFSI'], 2) #FOLLOWS AN AR(2)
SFSI_INDEX_p <- read_excel("../ext_data/stressindex.xlsx", sheet = "SVE")
SFSI_INDEX_p <- xts(SFSI_INDEX_p[,-1], order.by=as.Date(SFSI_INDEX$Datum, "%Y-%m-%d"))
SFSI_INDEX_p <- xts(SFSI_INDEX_p[,-1], order.by=as.Date(SFSI_INDEX$Datum, "%Y-%m-%d"))
SFSI_INDEX_p
plot(SFSI_INDEX_p)
plot(SFSI_INDEX_p$Stressindex)
plot(SFSI_INDEX_p$Stressindex, type = 'l')
ggplot(SFSI_INDEX_p$Stressindex, type = 'l')
library(ggplot)
library(ggplot2)
ggplot(data=df, aes(x=Datum, y=Stressindex, group=1)) +
geom_line()+
geom_point()
ggplot(data=SFSI_INDEX_p, aes(x=Datum, y=Stressindex, group=1)) +
geom_line()+
geom_point()
ggplot(data=SFSI_INDEX_p, aes(x=Datum, y=Stressindex, group=1)) +
geom_line()+
geom_point())
ggplot(data=SFSI_INDEX_p, aes(x=Datum, y=Stressindex, group=1)) +
geom_line()))
ggplot(data=SFSI_INDEX_p, aes(x=Datum, y=Stressindex, group=1)) + geom_line())
ggplot(data=SFSI_INDEX_p, aes(x=Datum, y=Stressindex, group=1)) + geom_line()
ggplot(data=SFSI_INDEX_p, aes(x=Datum, y=Stressindex, group=1))
ggplot(data=SFSI_INDEX_p, aes(x=Datum, y=Stressindex, group=1)) +
geom_line(color="red")
ggplot(data=SFSI_INDEX_p, aes(x=Datum, y=Stressindex, group=1)) +
geom_line(color="red")
ggplot(data=SFSI_INDEX_p, aes(x=as.Date(Datum), y=Stressindex, group=1)) +
geom_line(color="red")
ggplot(data=SFSI_INDEX_p, aes(x=as.Date(Datum), y=Stressindex, group=1)) +
geom_line(color="blue")
ggplot(data=SFSI_INDEX_p, aes(x=as.Date(Datum), y=Stressindex, group=1)) +
geom_line(color="blue") +
ggtitle("Financial Stress Index")
ggplot(data=SFSI_INDEX_p, aes(x=Datum, y=Stressindex, group=1)) +
geom_line(color="blue") +
ggtitle("Financial Stress Index")
SFSI_INDEX_p$Datum <- as.Date(SFSI_INDEX_p$Datum)
ggplot(data=SFSI_INDEX_p, aes(x=Datum, y=Stressindex, group=1)) +
geom_line(color="blue") +
ggtitle("Financial Stress Index")
ggplot(data=SFSI_INDEX_p, aes(x=Datum, y=Stressindex, group=1)) +
geom_line(color="blue") +
ggtitle("Financial Stress Index") +
scale_x_date(date_breaks = "10 years",
date_minor_breaks = "2 years")
ggplot(data=SFSI_INDEX_p, aes(x=Datum, y=Stressindex, group=1)) +
geom_line(color="blue") +
ggtitle("Financial Stress Index") +
scale_x_date(date_breaks = "10 years", date_minor_breaks = "2 years")
ggplot(data=SFSI_INDEX_p, aes(x=Datum, y=Stressindex, group=1)) +
geom_line(color="blue") +
ggtitle("Financial Stress Index") +
scale_x_date(date_breaks = "5 years", date_minor_breaks = "2 years")
ggplot(data=SFSI_INDEX_p, aes(x=Datum, y=Stressindex, group=1)) +
geom_line(color="blue") +
ggtitle("Financial Stress Index")
ggplot(data=SFSI_INDEX_p, aes(x=Datum, y=Stressindex), size=1) +
geom_line(color="blue") +
ggtitle("Financial Stress Index")
ggplot(data=SFSI_INDEX_p, aes(x=Datum, y=Stressindex), size=2) +
geom_line(color="blue") +
ggtitle("Financial Stress Index")
ggplot(data=SFSI_INDEX_p, aes(x=Datum, y=Stressindex), size=4) +
geom_line(color="blue") +
ggtitle("Financial Stress Index")
ggplot(data=SFSI_INDEX_p, aes(x=Datum, y=Stressindex), size=10) +
geom_line(color="blue") +
ggtitle("Financial Stress Index")
ggplot(data=SFSI_INDEX_p, aes(x=Datum, y=Stressindex)) +
geom_line(color="blue") +
ggtitle("Financial Stress Index")
ggplot(data=SFSI_INDEX_p, aes(x=Datum, y=Stressindex)) +
geom_line(color="blue", size=2) +
ggtitle("Financial Stress Index")
ggplot(data=SFSI_INDEX_p, aes(x=Datum, y=Stressindex)) +
geom_line(color="blue", size=1.1) +
ggtitle("Financial Stress Index")
ggplot(data=SFSI_INDEX_p, aes(x=Datum, y=Stressindex)) +
geom_line(color="blue", size=1) +
ggtitle("Financial Stress Index")
ggplot(data=SFSI_INDEX_p, aes(x=Datum, y=Stressindex)) +
geom_line(color="blue", size=1) +
ggtitle("Financial Stress Index")
ggplot(data=SFSI_INDEX_p, aes(x=Datum, y=Stressindex)) +
geom_line(color="blue", size=0.8) +
ggtitle("Financial Stress Index")
ggplot(data=SFSI_INDEX_p, aes(x=Datum, y=Stressindex)) +
geom_line(color="blue", size=0.5) +
ggtitle("Financial Stress Index")
ggplot(data=SFSI_INDEX_p, aes(x=Datum, y=Stressindex)) +
geom_line(color="green", size=0.5) +
ggtitle("Financial Stress Index")
ggplot(data=SFSI_INDEX_p, aes(x=Datum, y=Stressindex)) +
geom_line(color="darkgreen", size=0.5) +
ggtitle("Financial Stress Index")
ggplot(data=SFSI_INDEX_p, aes(x=Datum, y=Stressindex)) +
geom_line(color="darkgreen", size=0.5) +
ggtitle("Financial Stress Index") +
ylab("Financial Stress Index")
ggplot(data=SFSI_INDEX_p, aes(x=Datum, y=Stressindex)) +
geom_line(color="darkgreen", size=0.5) +
ggtitle("Financial Stress Index") +
ylab("Financial Stress Index") +
xlab('Date')
ggplot(data=SFSI_INDEX_p, aes(x=Datum, y=Stressindex)) +
geom_line(color="darkgreen", size=0.5) +
ylab("Financial Stress Index") +
xlab('Date')
ggplot(data=SFSI_INDEX_p, aes(x=Datum, y=Stressindex)) +
geom_line(color="darkgreen", size=0.5) +
ylab("FSI level") +
xlab('Date')
plot(DATA_SFSI)
plot(model_data.SFI)
par(mfrow=c(1,1))
plot(model_data.SFI)
plot(model_data.SFI[,1])
ggplot(data=model_data.SFI, aes(x=SFSI, y=Time)) +
geom_line(color="darkgreen", size=0.5) +
ylab("FSI level") +
xlab('Date')
library(ggplot2)
ggplot(data=model_data.SFI, aes(x=SFSI, y=Time)) +
geom_line(color="darkgreen", size=0.5) +
ylab("FSI level") +
xlab('Date')
plot(model_data.SFI[,1], ylab('SFSI Index'))
plot(model_data.SFI[,1], ylab('SFSI Index'))
plot(model_data.SFI[,1], ylab='SFSI Index')
plot(model_data.SFI[,2], ylab='SFSI Index')
plot(model_data.SFI[,2], ylab='GDP growth')
plot(model_data.SFI[,2], ylab='GDP Growth')
plot(model_data.SFI[,3], ylab='CPI')
plot(model_data.SFI[,4], ylab='DINT')
plot(model_data.SFI[,2], ylab='GDP')
plot(model_data.SFI[,1], ylab='SFSI')
plot(BNP)
summary(model_data.SFI)
plot(INT)
plot(DINT)
plot(INT)
summary(INT)
summary(model_data.SFI)
plot(model_data.SFI[,4])
plot(model_data.SFI[,'DINT'])
hist(model_data.SFI[,'DINT'])
hist(model_data.SFI[,'SFSI'])
dist(model_data.SFI[,'SFSI'])
hist(model_data.SFI[,'SFSI'])
plot(model_data.SFI[,'SFSI'])
hist(model_data.SFI[,'SFSI'])
hist(model_data.SFI[,'SFSI'], breaks=20)
hist(model_data.SFI[,'SFSI'], breaks=40)
summary(model_data.SFI)
SFSI_INDEX <- read.csv("bank_index.csv", sheet = "SVE")
BANK_INDEX <- read.csv("bank_index.csv")
BANK_INDEX
BANK_INDEX <- xts(SFSI_INDEX, order.by=as.Date(SFSI_INDEX$Datum, "%Y-%m-%d"))
library(tseries)
BANK_INDEX <- xts(BANK_INDEX, order.by=as.Date(SFSI_INDEX$Datum, "%Y-%m-%d"))
library(seasonal)
BANK_INDEX <- xts(BANK_INDEX, order.by=as.Date(SFSI_INDEX$Datum, "%Y-%m-%d"))
library(xts)
BANK_INDEX <- xts(BANK_INDEX, order.by=as.Date(SFSI_INDEX$Datum, "%Y-%m-%d"))
BANK_INDEX <- xts(BANK_INDEX, order.by=as.Date(BANK_INDEX$Datum, "%Y-%m-%d"))
BANK_INDEX <- read.csv("bank_index.csv", delimeter=';')
BANK_INDEX <- read.csv("bank_index.csv", delim=';')
BANK_INDEX$Datum.Stängning
BANK_INDEX$Datum
BANK_INDEX <- read_csv("bank_index.csv", delim=';')
BANK_INDEX <- read_csv("bank_index.csv")
BANK_INDEX <- read.csv("bank_index.csv", sep=';')
BANK_INDEX <- read.csv("bank_index.csv", sep=';')
BANK_INDEX <- xts(BANK_INDEX, order.by=as.Date(BANK_INDEX$Datum, "%Y-%m-%d"))
BANK_INDEX <- apply.quarterly(BANK_INDEX, sum) #SUM TO QUATERLY
BANK_INDEX
BANK_INDEX <- read.csv("bank_index.csv", sep=';')
BANK_INDEX
BANK_INDEX <- xts(BANK_INDEX, order.by=as.Date(BANK_INDEX$Datum, "%Y-%m-%d"))
BANK_INDEX
BANK_INDEX[1]
BANK_INDEX[,1]
BANK_INDEX[,2]
BANK_INDEX <- as.numeric(BANK_INDEX[,2])
BANK_INDEX
BANK_INDEX <- xts(BANK_INDEX, order.by=as.Date(BANK_INDEX$Datum, "%Y-%m-%d"))
BANK_INDEX <- read.csv("bank_index.csv", sep=';')
BANK_INDEX <- xts(BANK_INDEX, order.by=as.Date(BANK_INDEX$Datum, "%Y-%m-%d"))
BANK_INDEX <- apply(BANK_INDEX[,2],2,as.numeric)
BANK_INDEX
BANK_INDEX <- xts(BANK_INDEX, order.by=as.Date(BANK_INDEX$Datum, "%Y-%m-%d"))
BANK_INDEX
BANK_INDEX <- read.csv("bank_index.csv", sep=';')
BANK_INDEX <- xts(BANK_INDEX, order.by=as.Date(BANK_INDEX$Datum, "%Y-%m-%d"))
BANK_INDEX
BANK_INDEX[,2]
apply(BANK_INDEX[,2], numeric)
apply(BANK_INDEX[,2], 2, numeric)
BANK_INDEX <- read.csv("bank_index.csv", sep=';')
BANK_INDEX <- xts(BANK_INDEX)
BANK_INDEX <- xts(BANK_INDEX, order.by=as.Date(BANK_INDEX$Datum, "%Y-%m-%d"))
BANK_INDEX
BANK_INDEX <- read.csv("bank_index.csv", sep=';', header = TRUE)
BANK_INDEX <- xts(BANK_INDEX, order.by=as.Date(BANK_INDEX$Datum, "%Y-%m-%d"))
BANK_INDEX
BANK_INDEX <- read.csv("bank_index.csv", sep=';', header = TRUE)
BANK_INDEX <- xts(BANK_INDEX, order.by=as.Date(BANK_INDEX$Datum, "%Y-%m-%d"))
BANK_INDEX
BANK_INDEX <- xts(as.numeric(BANK_INDEX), order.by=as.Date(BANK_INDEX$Datum, "%Y-%m-%d"))
BANK_INDEX
BANK_INDEX <- xts(as.numeric(BANK_INDEX$Stängning), order.by=as.Date(BANK_INDEX$Datum, "%Y-%m-%d"))
BANK_INDEX
BANK_INDEX <- as.numeric(BANK_INDEX$Stängning)
BANK_INDEX
BANK_INDEX <- read.csv("bank_index.csv", sep=',', header = TRUE)
BANK_INDEX <- xts(BANK_INDEX, order.by=as.Date(BANK_INDEX$Datum, "%Y-%m-%d"))
BANK_INDEX <- as.numeric(BANK_INDEX$Stängning)
BANK_INDEX <- apply.quarterly(BANK_INDEX, sum) #SUM TO QUATERLY
BANK_INDEX <- read.csv("bank_index.csv", sep=',', header = TRUE)
BANK_INDEX
BANK_INDEX <- read.csv("bank_index.csv", sep=';', header = TRUE)
BANK_INDEX
BANK_INDEX <- xts(BANK_INDEX, order.by=as.Date(BANK_INDEX$Datum, "%Y-%m-%d"))
storage.mode(BANK_INDEX) <- "integer"
BANK_INDEX
storage.mode(BANK_INDEX) <- "float"
BANK_INDEX <- read.csv("bank_index.csv", sep=';', header = TRUE)
BANK_INDEX <- xts(BANK_INDEX, order.by=as.Date(BANK_INDEX$Datum, "%Y-%m-%d"))
storage.mode(BANK_INDEX) <- "float"
BANK_INDEX
BANK_INDEX <- read.csv2("bank_index.csv", sep=';', header = TRUE)
BANK_INDEX <- xts(BANK_INDEX, order.by=as.Date(BANK_INDEX$Datum, "%Y-%m-%d"))
BANK_INDEX
BANK_INDEX <- read.csv2("bank_index.csv", sep=';', header = TRUE)
BANK_INDEX <- xts(BANK_INDEX, order.by=as.Date(BANK_INDEX$Datum, "%Y-%m-%d"))
BANK_INDEX
BANK_INDEX$Datum <- NULL
BANK_INDEX
storage.mode(BANK_INDEX) <- "numeric"
BANK_INDEX
BANK_INDEX <- apply.quarterly(BANK_INDEX, sum) #SUM TO QUATERLY
BANK_INDEX
BANK_INDEX <- apply.quarterly(BANK_INDEX, avg) #SUM TO QUATERLY
BANK_INDEX <- apply.quarterly(BANK_INDEX, average) #SUM TO QUATERLY
BANK_INDEX <- apply.quarterly(BANK_INDEX, mean) #SUM TO QUATERLY
BANK_INDEX
clear
BANK_INDEX[1]
BANK_INDEX <- apply.quarterly(BANK_INDEX, mean) #SUM TO QUATERLY
BANK_INDEX <- ts(BANK_INDEX$Stressindex, start = c(2000, 3, 31), frequency = 4)
BANK_INDEX <- ts(BANK_INDEX$Stängning, start = c(2000, 3, 31), frequency = 4)
BANK_INDEX <- read.csv2("bank_index.csv", sep=';', header = TRUE)
BANK_INDEX <- xts(BANK_INDEX, order.by=as.Date(BANK_INDEX$Datum, "%Y-%m-%d"))
BANK_INDEX$Datum <- NULL
storage.mode(BANK_INDEX) <- "numeric"
BANK_INDEX <- apply.quarterly(BANK_INDEX, mean) #SUM TO QUATERLY
BANK_INDEX <- ts(BANK_INDEX$Stängning, start = c(2000, 3, 31), frequency = 4)
BANK_INDEX
BANK_INDEX$SD <- rollapply(data = BANK_INDEX$Stängning, width=1,FUN=sd)
BANK_INDEX$SD <- rollapply(data = BANK_INDEX, width=1,FUN=sd)
BANK_INDEX
BANK_INDEX <- xts(BANK_INDEX, order.by=as.Date(BANK_INDEX$Datum, "%Y-%m-%d"))
BANK_INDEX$Datum <- NULL
storage.mode(BANK_INDEX) <- "numeric"
BANK_INDEX <- apply.quarterly(BANK_INDEX, mean) #SUM TO QUATERLY
BANK_INDEX <- ts(BANK_INDEX$Stängning, start = c(2000, 3, 31), frequency = 4)
BANK_INDEX <- read.csv2("bank_index.csv", sep=';', header = TRUE)
BANK_INDEX <- xts(BANK_INDEX, order.by=as.Date(BANK_INDEX$Datum, "%Y-%m-%d"))
BANK_INDEX$Datum <- NULL
storage.mode(BANK_INDEX) <- "numeric"
BANK_INDEX <- apply.quarterly(BANK_INDEX, mean) #SUM TO QUATERLY
BANK_INDEX <- ts(BANK_INDEX$Stängning, start = c(2000, 3, 31), frequency = 4)
BANK_INDEX
BANK_INDEX <- read.csv2("bank_index.csv", sep=';', header = TRUE)
BANK_INDEX <- xts(BANK_INDEX, order.by=as.Date(BANK_INDEX$Datum, "%Y-%m-%d"))
BANK_INDEX$Datum <- NULL
storage.mode(BANK_INDEX) <- "numeric"
BANK_INDEX <- apply.quarterly(BANK_INDEX, mean) #SUM TO QUATERLY
BANK_INDEX$Close <- ts(BANK_INDEX$Stängning, start = c(2000, 3, 31), frequency = 4)
BANK_INDEX
BANK_INDEX <- xts(BANK_INDEX, order.by=as.Date(BANK_INDEX$Datum, "%Y-%m-%d"))
BANK_INDEX$Datum <- NULL
storage.mode(BANK_INDEX) <- "numeric"
BANK_INDEX <- apply.quarterly(BANK_INDEX, mean) #SUM TO QUATERLY
BANK_INDEX <- ts(BANK_INDEX$Stängning, start = c(2000, 3, 31), frequency = 4)
BANK_INDEX
BANK_INDEX <- read.csv2("bank_index.csv", sep=';', header = TRUE)
BANK_INDEX <- xts(BANK_INDEX, order.by=as.Date(BANK_INDEX$Datum, "%Y-%m-%d"))
BANK_INDEX$Datum <- NULL
storage.mode(BANK_INDEX) <- "numeric"
BANK_INDEX <- apply.quarterly(BANK_INDEX, mean) #SUM TO QUATERLY
BANK_INDEX <- ts(BANK_INDEX$Stängning, start = c(2000, 3, 31), frequency = 4)
BANK_INDEX
SD <- rollapply(data = BANK_INDEX, width=1,FUN=sd)
SD
SD <- rollapply(data = BANK_INDEX, width=4,FUN=sd)
SD
plot(SD)
plot(BANK_INDEX)
SD <- rollapply(data = diff(BANK_INDEX), width=4,FUN=sd)
plot(SD)
plot(SD)
BANK_INDEX <- read.csv2("bank_index.csv", sep=';', header = TRUE)
BANK_INDEX <- xts(BANK_INDEX, order.by=as.Date(BANK_INDEX$Datum, "%Y-%m-%d"))
BANK_INDEX$Datum <- NULL
storage.mode(BANK_INDEX) <- "numeric"
BANK_INDEX <- apply.quarterly(BANK_INDEX, mean) #SUM TO QUATERLY
BANK_INDEX <- ts(BANK_INDEX$Stängning, start = c(2000, 3, 31), frequency = 4)
BANK_INDEX <- final(seas(as.ts((BANK_INDEX),freq=4)))
SD <- rollapply(data = diff(BANK_INDEX), width=4,FUN=sd)
plot(SD)
plot(BANK_INDEX)
plot(SD)
SD
write.csv(SD, file='bank_volatility')
write.csv(SD, file='bank_volatility.csv')
SD
BANK_INDEX <- read.csv2("bank_index.csv", sep=';', header = TRUE)
BANK_INDEX <- xts(BANK_INDEX, order.by=as.Date(BANK_INDEX$Datum, "%Y-%m-%d"))
BANK_INDEX$Datum <- NULL
storage.mode(BANK_INDEX) <- "numeric"
BANK_INDEX <- apply.quarterly(BANK_INDEX, mean) #SUM TO QUATERLY
BANK_INDEX <- ts(BANK_INDEX$Stängning, start = c(2000, 3, 31), frequency = 4)
BANK_INDEX <- final(seas(as.ts((BANK_INDEX),freq=4)))
SD <- rollapply(data = diff(BANK_INDEX), width=4,FUN=sd)
Sd_data <- data.frame(Y=as.matrix(SD), date=time(SD))
write.csv(Sd_data)
Sd_data <- data.frame(Y=as.matrix(SD), date=as.Date(SD))
write.csv(Sd_data)
BANK_INDEX <- read.csv2("bank_index.csv", sep=';', header = TRUE)
BANK_INDEX <- xts(BANK_INDEX, order.by=as.Date(BANK_INDEX$Datum, "%Y-%m-%d"))
BANK_INDEX$Datum <- NULL
storage.mode(BANK_INDEX) <- "numeric"
BANK_INDEX <- apply.quarterly(BANK_INDEX, mean) #SUM TO QUATERLY
BANK_INDEX <- ts(BANK_INDEX$Stängning, start = c(2000, 3, 31), frequency = 4)
BANK_INDEX <- final(seas(as.ts((BANK_INDEX),freq=4)))
SD <- rollapply(data = diff(BANK_INDEX), width=4,FUN=sd)
Sd_data <- data.frame(Y=as.matrix(SD), date=as.Date(SD))
write.csv(Sd_data)
BANK_INDEX <- read.csv2("bank_index.csv", sep=';', header = TRUE)
BANK_INDEX <- xts(BANK_INDEX, order.by=as.Date(BANK_INDEX$Datum, "%Y-%m-%d"))
BANK_INDEX$Datum <- NULL
storage.mode(BANK_INDEX) <- "numeric"
BANK_INDEX <- apply.quarterly(BANK_INDEX, mean) #SUM TO QUATERLY
BANK_INDEX <- ts(BANK_INDEX$Stängning, start = c(2000, 3, 31), frequency = 4)
BANK_INDEX <- final(seas(as.ts((BANK_INDEX),freq=4)))
SD <- rollapply(data = diff(BANK_INDEX), width=4,FUN=sd)
Sd_data <- data.frame(Y=as.matrix(SD), date=as.Date(SD))
write.csv(Sd_data, file = 'bank_vol.csv')
